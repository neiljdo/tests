// Generated by CoffeeScript 1.6.2
(function() {
  var Player, root, tileValues,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  tileValues = {
    A: 1,
    B: 3,
    C: 3,
    D: 2,
    E: 1,
    F: 4,
    G: 2,
    H: 4,
    I: 1,
    J: 8,
    K: 5,
    L: 1,
    M: 3,
    N: 1,
    O: 1,
    P: 3,
    Q: 10,
    R: 1,
    S: 1,
    T: 1,
    U: 1,
    V: 4,
    W: 4,
    X: 8,
    Y: 4,
    Z: 10
  };

  Player = (function() {
    function Player(name, dictionary) {
      this.name = name;
      if (dictionary != null) {
        this.setDictionary(dictionary);
      }
    }

    Player.prototype.setDictionary = function(dictionary) {
      this.dictionary = dictionary;
      this.score = 0;
      return this.moveCount = 0;
    };

    Player.prototype.makeMove = function(swapCoords) {
      var result;

      this.dictionary.grid.swap(swapCoords);
      this.moveCount++;
      result = this.scoreMove(this.dictionary.grid, swapCoords);
      this.score += result.moveScore;
      return result;
    };

    Player.prototype.scoreMove = function(grid, swapCoordinates) {
      var letter, moveScore, multiplier, newWords, word, words, x1, x2, y1, y2, _i, _j, _len, _len1;

      x1 = swapCoordinates.x1, y1 = swapCoordinates.y1, x2 = swapCoordinates.x2, y2 = swapCoordinates.y2;
      words = this.dictionary.wordsThroughTile(x1, y1).concat(this.dictionary.wordsThroughTile(x2, y2));
      moveScore = multiplier = 0;
      newWords = [];
      for (_i = 0, _len = words.length; _i < _len; _i++) {
        word = words[_i];
        if (!(__indexOf.call(this.dictionary.usedWords, word) < 0 && this.dictionary.isNewWord(word))) {
          continue;
        }
        multiplier++;
        for (_j = 0, _len1 = word.length; _j < _len1; _j++) {
          letter = word[_j];
          moveScore += tileValues[letter];
        }
        newWords.push(word);
      }
      this.dictionary.usedWords = this.dictionary.usedWords.concat(newWords);
      moveScore *= multiplier;
      return {
        moveScore: moveScore,
        newWords: newWords
      };
    };

    return Player;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.Player = Player;

}).call(this);
