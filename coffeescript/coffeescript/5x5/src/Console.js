// Generated by CoffeeScript 1.6.2
(function() {
  var Dictionary, Grid, OWL2, Player, gridSize, inputCallback, isInteger, promptForTile1, promptForTile2, setupGame, stdin, strToCoordinates;

  Dictionary = require('./Dictionary').Dictionary;

  Grid = require('./Grid').Grid;

  Player = require('./Player').Player;

  OWL2 = require('./OWL2').OWL2;

  stdin = process.openStdin();

  stdin.setEncoding('utf8');

  inputCallback = null;

  stdin.on('data', function(input) {
    return inputCallback(input);
  });

  gridSize = 5;

  setupGame = function() {
    console.log('Enter your name:');
    return inputCallback = function(input) {
      var dictionary, grid, player;

      grid = new Grid(gridSize);
      dictionary = new Dictionary(OWL2, grid);
      player = new Player(input, dictionary);
      if (dictionary.usedWords.length !== 0) {
        console.log("Initially used words:\n" + (dictionary.usedWords.join(', ')));
      }
      return promptForTile1.call(player);
    };
  };

  promptForTile1 = function() {
    var player;

    console.log("Please enter coordinates for the first tile.");
    player = this;
    return inputCallback = function(input) {
      var e, x, y, _ref;

      try {
        _ref = strToCoordinates.call(player.dictionary.grid, input), x = _ref.x, y = _ref.y;
      } catch (_error) {
        e = _error;
        return;
      }
      return promptForTile2.call(player, x, y);
    };
  };

  promptForTile2 = function(x1, y1) {
    var player;

    console.log('Please enter coordinates for the second tile.');
    player = this;
    return inputCallback = function(input) {
      var e, moveScore, newWords, x2, y2, _ref, _ref1;

      try {
        _ref = strToCoordinates.call(player.dictionary.grid, input), x2 = _ref.x, y2 = _ref.y;
      } catch (_error) {
        e = _error;
        return;
      }
      if (x1 === x2 && y1 === y2) {
        return console.log('Please choose a different tile.');
      } else {
        console.log("Swapping (" + x1 + ", " + y1 + ") and (" + x2 + ", " + y2 + ")...");
        x1--;
        y1--;
        x2--;
        y2--;
        _ref1 = player.makeMove({
          x1: x1,
          y1: y1,
          x2: x2,
          y2: y2
        }), moveScore = _ref1.moveScore, newWords = _ref1.newWords;
        if (moveScore !== 0) {
          console.log("You formed the following word(s):\n" + (newWords.join(', ')));
        }
        console.log("Your score after " + player.moveCount + " move(s): " + player.score);
        player.dictionary.grid.printGrid();
        return promptForTile1.call(player);
      }
    };
  };

  isInteger = function(num) {
    return num === Math.round(num);
  };

  strToCoordinates = function(input) {
    var halves, x, y;

    halves = input.split(',');
    if (halves.length === 2) {
      x = parseFloat(halves[0]);
      y = parseFloat(halves[1]);
      if (!isInteger(x) || !isInteger(y)) {
        return console.log('Each coordinate must be an integer.');
      } else if (!this.inRange(x - 1, y - 1)) {
        return console.log("Each coordinate must be beween 1 and " + this.size + ".");
      } else {
        return {
          x: x,
          y: y
        };
      }
    } else {
      return console.log('Input must be the form of `x,y`.');
    }
  };

  console.log("Welcome to " + gridSize + "x" + gridSize + "!");

  setupGame();

}).call(this);
