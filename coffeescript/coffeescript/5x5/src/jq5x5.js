// Generated by CoffeeScript 1.6.2
(function() {
  var currPlayer, dictionary, doMove, drawGrid, endTurn, grid, gridSize, newGame, player1, player2, selectTile, selectedCoords, showThenFade, tileClick, updateScoreTable;

  grid = dictionary = currPlayer = player1 = player2 = selectedCoords = null;

  gridSize = 5;

  newGame = function() {
    var name1, name2, p, _i, _len, _ref, _results;

    grid = new Grid(gridSize);
    dictionary = new Dictionary(OWL2, grid);
    name1 = prompt('Enter your name:');
    name2 = prompt('Enter the name of your opponent');
    currPlayer = player1 = new Player(name1, dictionary);
    player2 = new Player(name2, dictionary);
    drawGrid();
    player1.num = 1;
    player2.num = 2;
    _ref = [player1, player2];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      $(".p" + p.num + "name").html(p.name);
      _results.push($(".p" + p.num + "score").html(p.score));
    }
    return _results;
  };

  drawGrid = function() {
    var gridHTML, x, y, _i, _j, _ref, _ref1;

    gridHTML = '';
    for (x = _i = 0, _ref = grid.tiles.length; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
      gridHTML += '<ul>';
      for (y = _j = 0, _ref1 = grid.tiles.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
        gridHTML += "<li id='tile" + x + "_" + y + "'>" + grid.tiles[x][y] + "</li>";
      }
      gridHTML += '</ul>';
    }
    return $('.grid').html(gridHTML);
  };

  tileClick = function() {
    var $tile, x, y, _ref;

    $tile = $(this);
    if ($tile.hasClass('selected')) {
      selectedCoords = null;
      return $tile.removeClass('selected');
    } else {
      $tile.addClass('selected');
      _ref = this.id.match(/(\d+)_(\d+)/).slice(1), x = _ref[0], y = _ref[1];
      return selectTile(x, y);
    }
  };

  selectTile = function(x, y) {
    if (selectedCoords === null) {
      return selectedCoords = {
        x1: x,
        y1: y
      };
    } else {
      selectedCoords.x2 = x;
      selectedCoords.y2 = y;
      $('.grid li').removeClass('selected');
      return doMove();
    }
  };

  doMove = function() {
    var $notice, moveScore, newWords, _ref;

    console.log(selectedCoords);
    console.log(currPlayer);
    _ref = currPlayer.makeMove(selectedCoords), moveScore = _ref.moveScore, newWords = _ref.newWords;
    if (moveScore === 0) {
      $notice($("<p class=\"notice\">" + currPlayer.name + " formed no words this turn.</p>"));
    } else {
      $notice = $("<p class=\"notice\">\n  " + currPlayer.name + " formed the following " + newWords.length + " words this turn: <br>\n  <strong>" + (newWords.join(', ')) + "</strong><br>\n  earning " + moveScore + " points!\n</p>");
    }
    showThenFade($notice);
    return endTurn();
  };

  endTurn = function() {
    drawGrid();
    currPlayer = currPlayer === player1 ? player2 : player1;
    console.log(currPlayer.name);
    updateScoreTable();
    return selectedCoords = null;
  };

  showThenFade = function($elem) {
    var animationTarget;

    $elem.insertAfter($('.grid'));
    animationTarget = {
      opacity: 0,
      height: 0,
      padding: 0
    };
    return $elem.delay(5000).animate(animationTarget, 500, function() {
      return $elem.remove();
    });
  };

  updateScoreTable = function() {
    var p, _i, _len, _ref, _results;

    _ref = [player1, player2];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      _results.push($(".p" + p.num + "score").html(p.score));
    }
    return _results;
  };

  $(document).ready(function() {
    newGame();
    return $(document).on('click', '.grid li', tileClick);
  });

}).call(this);
